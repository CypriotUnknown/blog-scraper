[
    {
        "url": "https://www.calhoun.io/how-the-gophers-are-made/",
        "title": "how the gophers are made",
        "preview": "a deep dive into how the gopher graphics and logos are created for my programming courses."
    },
    {
        "url": "https://www.calhoun.io/building-a-blog-part-3/",
        "title": "building a blog in go: metadata via frontmatter",
        "preview": "my go blog has a way to render individual posts, but it is still missing metadata about each post. information like the author of the post, when it was published, etc. in this part of the build a blog series we focus on adding frontmatter so that we can properly render this for each blog post, but also in preparation for when we want to show a list of all of our blog posts."
    },
    {
        "url": "https://www.calhoun.io/building-a-blog-part-2/",
        "title": "building a blog in go: rendering markdown as html",
        "preview": "now that our blog can render plaintext markdown, i was ready to start converting the markdown into html and rendering it nicely. the first step was to find a markdown processing library and start using it. after that i added code syntax highlighting, and finished up with an html template so i could render a navbar and other common elements on every page that shows a blog post."
    },
    {
        "url": "https://www.calhoun.io/building-a-blog-part-1/",
        "title": "building a blog in go: rendering raw markdown",
        "preview": "the first step i took when building my go blog was to setup a simple http server that can return the slug of the blog. this is a unique identifier for the blog that is a bit more url-friendly. from there i worked on the code necessary to read files from the local disk and started rendering the raw markdown to the http handler in preparation for the next part of this series where i will start rendering the markdown in proper html."
    },
    {
        "url": "https://www.calhoun.io/building-a-blog-exercise/",
        "title": "building a blog exercise",
        "preview": "in this series we work through building a blog in go. the first article helps set the scene by explaining what we are going to build, what to expect from the series, and provides some suggestions on how to break down the problem and proceed if you want to try coding it on your own first."
    },
    {
        "url": "https://www.calhoun.io/does-range-copy-the-slice-in-go/",
        "title": "does go's range copy a slice before iterating over it?",
        "preview": "this week someone in my go courses slack asked why their for loop wasn\u2019t working the way they expected. more specifically, they were wondering if go\u2019s range keyword was copying their slice before iterating over it.\ni won\u2019t use the exact same code here, but we can look at a similar example by trying to generate the fibonacci sequence.\nif you don\u2019t know what the fibonacci sequence is, don\u2019t worry."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/go-servemux-vs-chi/",
        "title": "go's 1.22+ servemux vs chi router",
        "preview": "in go 1.22 the servemux was updated to be significantly easier to use for building web applications. supported was added for http methods, variables in url paths, and more. in this article we discuss how it stacks up to some third party libraries that have existed in the go ecosystemf or a while."
    },
    {
        "url": "https://www.calhoun.io/what-does-the-tilde-mean-in-go-generics/",
        "title": "what does the tilde  mean in go generics",
        "preview": "go's generics use the tilde (~) character to represent types that have a specific underlying type. in this article we explore that in a bit more depth, looking at examples of where this can be useful to make generic functions even more powerful."
    },
    {
        "url": "https://www.calhoun.io/crash-course-on-go-generics/",
        "title": "crash course on go generics",
        "preview": "generics provide a way to write type-safe code in a statically typed language like go. in this article we explore how generics work, use cases for using generics, and some common misconceptions that beginners to generics may have."
    },
    {
        "url": "https://www.calhoun.io/crash-course-on-go-interfaces/",
        "title": "crash course on go interfaces",
        "preview": "interfaces in go are going to be a foreign concept to many developers. for many, they will be coming from dynamic languages where interfaces aren't necessary, and for the devs coming from languages like java they will have to drastically adjust their mindset to take advantage of go's unique approach to interfaces. in this article we start diving into how those interfaces work."
    },
    {
        "url": "https://www.calhoun.io/concurrency-patterns-in-go-sync-waitgroup/",
        "title": "concurrency patterns in go: sync.waitgroup",
        "preview": "learn how to use sync.waitgroup in concurrent go code to wait for a group of goroutines to finish before proceeding with the rest of your code (or terminating the program if in main)."
    },
    {
        "url": "https://www.calhoun.io/database-migrations-in-go/",
        "title": "database migrations in go",
        "preview": "when transitioning to go from another language that relies heavily on a framework, it can quickly start to feel like go is lacking. like it just doesn\u2019t have the power or the tools that you are accustomed to. the end result is the language can feel confusing and clunky.\none example of this is database migration tooling.\nif you are coming from a framework like rails, django, flask, laravel, or really any web framework, you very likely have an idea of what i am talking about."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/testing-api-libraries/",
        "title": "testing api libraries",
        "preview": "nearly all apps need to talk other apps via api. in many cases we end up writing those api libraries on our own, which means we need to come up with a reliable way to test that code. in this article we explore techniques and advice that make it easier to test and maintain api client libraries written in go."
    },
    {
        "url": "https://www.calhoun.io/how-to-parse-json-that-varies-between-an-array-or-a-single-item-with-go/",
        "title": "how to parse json that varies between an array or a single item with go",
        "preview": "have you ever interact with an api that returns variable data formats depending on the circumstances? yeah, it's a pain. in this post we explore one particular situation - when the response can either be an array or a single item - and look at how to handle unmarshaling the json in go."
    },
    {
        "url": "https://www.calhoun.io/creating-a-live-reloader-in-200-lines-of-go-code/",
        "title": "creating a live reloader in less than 200 lines of go code",
        "preview": "read about the process of building a live-reloader in go in less than 200 lines of go code. the live reloading is done via polling so that it works in environments where file change events aren't available, such as docker containers in some scenarios."
    },
    {
        "url": "https://www.calhoun.io/wfh-separating-your-personal-and-work-life/",
        "title": "working from home: separating your personal and work life",
        "preview": "with the recent surge in working from home (wfh), i wanted to take some time to share some lessons, tips, and experiences about wfh. i\u2019m not naive enough to believe that i have all of the answers, especially amid school closings and the million other unique factors brought about by covid-19, but there are many lessons that i have learned over the last 8 or so years working remotely that i believe will still be helpful."
    },
    {
        "url": "https://www.calhoun.io/more-effective-ddd-with-interface-test-suites/",
        "title": "more effective ddd with interface test suites",
        "preview": "when using domain driven design in go, there are a few techniques that can be paired with ddd for a better overall experience. one of those is interface test suites - tests designed to run against any implementation of an interface. in this article we explore what interface test suites are, how to utilize them, and why they pair so well with ddd."
    },
    {
        "url": "https://www.calhoun.io/moving-towards-domain-driven-design-in-go/",
        "title": "moving towards domain driven design in go",
        "preview": "domain driven design sounds great in theory, but how is it applied in go? in this article we explore some code as it slowly evolves into ddd, learning how and why each decision is made along the way and what benefits it will provide us in the future. we then discuss the pros and cons of starting with a more domain-focuses design."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/using-mvc-to-structure-go-web-applications/",
        "title": "using mvc to structure go web applications",
        "preview": "mvc is a well-known way to structure web applications, but it is often shunned in go. in this article we explore how mvc can be effectively implement in go as well as how to avoid all of the issues that many people associate with mvc."
    },
    {
        "url": "https://www.calhoun.io/flat-application-structure/",
        "title": "flat application structure in go",
        "preview": "rather than spending time trying to figure out how to break code into packages, an app with a flat structure would just place all of the go files in a single package. this sounds kinda crazy, but can actually be a great facilitator of learning and letting code evolve into a better final state."
    },
    {
        "url": "https://www.calhoun.io/why-cant-we-settle-on-a-single-application-structure-in-go/",
        "title": "why cant we settle on a single application structure in go",
        "preview": "getting started in go can be hard. the language itself is pretty easy to pick up, but figuring out how to structure your application can become overwhelming early on. at least it was a big time sink for me coming from a ruby on rails background where all of those early decisions were made for me.\nas i progressed i kept wondering why i had to make all of these decisions myself."
    },
    {
        "url": "https://www.calhoun.io/tdd-is-not-for-me/",
        "title": "tdd is not for me",
        "preview": "test driven development is thought of as a practice every developer should adhere to, yet many of us privately struggle to be productive using tdd. in this article we explore some of the reasons why tdd isn't always a great choice and can hinder your productivity"
    },
    {
        "url": "https://www.calhoun.io/testing-is-not-for-beginners/",
        "title": "testing is not for beginners",
        "preview": "everyone keeps saying you should be testing, but are they right? in this article we discuss the downsides to trying to learn testing too early and how it can negatively affect your ability to learn to code."
    },
    {
        "url": "https://www.calhoun.io/when-nil-isnt-equal-to-nil/",
        "title": "when nil isn't equal to nil",
        "preview": "it is easy to get confused by when and why different variants of nil will be equal and when they won't be in go. in this article we explore why this happens so that you know what to expect when writing your code."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/interfaces-define-requirements/",
        "title": "interfaces define requirements",
        "preview": "go's duck typing allows us to write implementations before interfaces, but it also enables so much more. in this article we explore how duck typed interfaces allow us to communicate clear requirements in our functions and structs."
    },
    {
        "url": "https://www.calhoun.io/building-gophercises/",
        "title": "building gophercises",
        "preview": "this is a write-up of a talk i gave at the gotham go conference in 2018. it won\u2019t be identical to the talk, but should cover the same topics and convey the same message. whenever the videos from the conference are posted online i\u2019ll also link to it from here.\nslides from this talk can be found here.\nwhat is gophercises? gophercises is a free course i created that is composed of mini-exercises to help budding gophers (go developers) practice writing go code and gain familiarity with different aspects of the language."
    },
    {
        "url": "https://www.calhoun.io/apis-are-just-web-applications/",
        "title": "json apis are just web applications",
        "preview": "a common misconception is that a json api is vastly different from a web application that renders server-side html. in this article we explore how to convert an html-based web app into a json api in order to demonstrate how similar the two really are in a well designed app."
    },
    {
        "url": "https://www.calhoun.io/why-cant-i-pass-this-function-as-an-http-handler/",
        "title": "why cant i pass this function as an http handler?!",
        "preview": "an incredibly common question i get when helping people learn web development is, \"why can\u2019t i pass this handler function into a function that expects an http.handler?\" it is a logical question. the compiler can automatically convert those functions into the http.handlerfunc type, so why can't it take the next step and infer that it also implements the handler interface? learn why (and more) in this article!"
    },
    {
        "url": "https://www.calhoun.io/gotham-go-2018/",
        "title": "gotham go 2018",
        "preview": "slides from my talk at gothamgo 2018"
    },
    {
        "url": "https://www.calhoun.io/jon-on-the-go-time-podcast/",
        "title": "jon on the go time podcast!",
        "preview": "i was lucky enough to be invited onto the popular go time to discuss things like gophercises, experiencing the joy programming, and more.\nif you want to check it out you can use the widget below to listen, visit the website (https://changelog.com/gotime/74) to download an mp3, and lastly you can probably find the episodes anywhere else you typically consume podcasts (i have only verified go time is on google music and apple music)."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/go-experience-report-interfaces-with-methods-that-return-themselves/",
        "title": "go experience report: interfaces with methods that return themselves",
        "preview": "i want to describe a scenario where there currently isn\u2019t a good solution in go (at least that i am aware of). let\u2019s say you have something like the template.template type with methods like template.funcs:\ntype template struct { *parse.tree // contains filtered or unexported fields } func (t *template) funcs(funcmap funcmap) *template if we wanted to use an interface for this type, it is impossible to express in go now."
    },
    {
        "url": "https://www.calhoun.io/using-the-service-object-pattern-in-go/",
        "title": "using the service object pattern in go",
        "preview": "developing a web application without separating the logic used to parse an incoming request from the actual application logic can be painful. it is hard to test your card, dependencies aren't clear, and the code can become a mess. learn how to apply the service object pattern to your go code in order to properly isolate these concerns, making it easier to test, maintain, and read your code."
    },
    {
        "url": "https://www.calhoun.io/concatenating-and-building-strings-in-go/",
        "title": "concatenating and building strings in go 1.10+",
        "preview": "go 1.10 introduced the new strings.builder type, which can be used to efficiently and easily build or concatenate strings. in this post we explore some of the ways to use the type as well as why it implementing the io.writer interface makes it an incredibly powerful tool."
    },
    {
        "url": "https://www.calhoun.io/exploring-vgo/",
        "title": "exploring vgo",
        "preview": "yesterday russ cox announced vgo, a drop in replacement for the go tool designed to handle package versioning. while it is still an experiment, it is a pretty unexpected change given that everyone thought dep was going to become the official dependency management tool. if you haven\u2019t already, you should start by reading russ\u2019 post as well as the tour he provides. it is a great overview of what vgo is, even if many people have misinterpreted a few things in the post."
    },
    {
        "url": "https://www.calhoun.io/one-liner-if-statements-with-errors/",
        "title": "when should i use one liner if...else statements in go?",
        "preview": "after using go for a few weeks, chances are you are going to run across a single-line if...else statement. most often, you will see this with an err (eg if err := dostuff(); err != nil { ... }). this article discusses the situations where a one-liner is appropriate, and ones where it isn't a great fit."
    },
    {
        "url": "https://www.calhoun.io/new-site-live/",
        "title": "the new website is live",
        "preview": "gopher image by egon elbre \nafter quite a bit of time redoing my site, the new version is now ready for prime time. the new version is powered by hugo, which is a static site genreator written in go. it was previously powered by ghost which is a little different, so if you see any dead links or anything like that let me know.\nchanging to hugo allowed me to make quite a few changes that aren\u2019t purely cosmetic."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/disabling-snippets-in-atom/",
        "title": "disabling specific snippets (autocompletions) in atom",
        "preview": "i run into this issue a lot so i wanted to document how i handle it for others who are experiencing the same issue.\nlet\u2019s imagine you install this new package in atom like github flavored markdown and it enables a snippet that you don\u2019t like. in my case it was the code snippet which expands into the triple tildes (```) used for code samples in a markdown file.\nthe first thing you want to do is figure out what source the snippet was introduced under."
    },
    {
        "url": "https://www.calhoun.io/using-named-return-variables-to-capture-panics-in-go/",
        "title": "using named return variables to capture panics in go",
        "preview": "sometimes you can't help but call a function that might panic. rather than letting it blow up your code, we learn how to use a deferred function and named return variables in order to capture the result as a standard go error."
    },
    {
        "url": "https://www.calhoun.io/i-havent-needed-x-in-3-years-is-a-bad-argument/",
        "title": "\"i haven't needed x in 3 years\" is a bad argument",
        "preview": "in over a decade of driving, moving, and everything in between i have never needed a heavy duty truck like a ford f-350, so clearly they aren\u2019t useful and ford should stop making them, right?\noh construction workers might complain, but they could just use dump trucks to haul their heavy loads. and farmers might have issues, but they have tractors which could suffice. so what is the big deal? let\u2019s stop making those trucks!"
    },
    {
        "url": "https://www.calhoun.io/building-caddy-server-from-source/",
        "title": "building caddy server from source",
        "preview": "caddy's licensing change makes it problematic for many bootstrapped projects. learn to build caddy from source which is still open source with no eula."
    },
    {
        "url": "https://www.calhoun.io/securing-cookies-in-go/",
        "title": "securing cookies in go",
        "preview": "learn how to properly secure cookies from tampering, theft, xss, csrf, and more in go."
    },
    {
        "url": "https://www.calhoun.io/using-functional-options-instead-of-method-chaining-in-go/",
        "title": "using functional options instead of method chaining in go",
        "preview": "in java, it is pretty common to see libraries that use method chaining (aka the builder pattern) to construct resources. for example, we might construct a user by doing something like:\nuser user = new user.builder() .name(\"michael scott\") .email(\"michael@dundermifflin.com\") .role(\"manager\") .nickname(\"best boss\") .build(); builders are handy for a variety of reasons, but in the example above we are using a builder in order to define a subset of our user attributes before constructing the user object."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/subtle-issues-with-orms-and-how-to-avoid-them/",
        "title": "subtle issues with orms and how to avoid them",
        "preview": "one of the most common change requests i get with my web development course is to stop using gorm, and instead use the database/sql package that is part of go\u2019s standard library.\nwhen i receive feedback like this i often respond asking, \u201cwhy?\u201d why do they feel the database/sql package would be better suited for their education? why do they feel orms will be problematic long term?\ni don\u2019t ask these questions to be snarky or because i don\u2019t care; i ask because i truly want to understand a problem before i look for solutions, and oftentimes people will tell you their problem is x, when in reality x is only a symptom of a deeper problem."
    },
    {
        "url": "https://www.calhoun.io/generating-data-structures-that-need-additional-functions/",
        "title": "generating data structures that need additional functions",
        "preview": "there has been a lot of talk about generics lately in the go community which as lead to me thinking about them a lot lately. in thinking about generics, my mind instinctively wandered to code generation because that has been my go-to tool when i do need something resembling a generic. in fact, i have written about using code generation to get by without generics in go in the past."
    },
    {
        "url": "https://www.calhoun.io/what-is-sql-injection-and-how-do-i-avoid-it-in-go/",
        "title": "what is sql injection and how do i avoid it in go?",
        "preview": "sql injection is a method used by hackers to attempt to trick your code into running arbitrary (read - really bad) queries on your database."
    },
    {
        "url": "https://www.calhoun.io/using-code-generation-to-survive-without-generics-in-go/",
        "title": "using code generation to survive without generics in go",
        "preview": "learn how to use code generation to create type-safe code (like a queue or linkedlist) without having to rewrite the same thing over and over again."
    },
    {
        "url": "https://www.calhoun.io/stacks-in-go/",
        "title": "stacks - what they are, and how to implement them in go",
        "preview": "in this video we cover the stack data structure. specifically, we talk about how they relate to the real world and then we discuss how to implement a stack using go."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-queues-in-go/",
        "title": "queues - what are they and how do i implement one in go?",
        "preview": "in this video we cover what a queue is, how it relates to lines (like at the grocery store) in the real world, and how to implement a queue in go."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-updated-format-moar-videos/",
        "title": "let's learn algorithms - updated format, moar videos!",
        "preview": "join the discussion on reddit\ni started the let's learn algorithms series originally by writing tutorials that would:\n teach how an algorithm works demonstrate how to implement that algorithm in code provide some practice problems so you can get real practice implementing the algorithm in different scenarios  (2) and (3) are in my opinion incredibly important pieces to the puzzle that are often missing in many other courses, so i really try to give them just as much focus as the initial lesson that just teaches how the algorithm works."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-graph-theory-representing-a-binary-tree-in-go-code/",
        "title": "representing a binary tree in go code",
        "preview": "see https://play.golang.org/p/u4e6mrios0 for the completed code from this video.\n  in this video we learn how to represent a binary tree in go code. once we have the basic structure in place, we then go a step further and define an input file format that we can use to read in arbitrary binary trees moving forward to test our algorithms with.\nthis post is part of the let's learn algorithms series where we learn how algorithms work, see how to implement them, and then spend some time working on practice problems to reinforce how the implementation details work, as well as to help you learn to recognize problems that could be solved using any particular algorithm."
    },
    {
        "url": "https://www.calhoun.io/depth-first-search-dfs-on-a-binary-tree/",
        "title": "depth first search (dfs) on a binary tree",
        "preview": "in this video we cover how the depth first search algorithm works. we do so by starting with a binary tree and walking through how the algorithm would iterate over the tree searching for a specific node.\nwe intentionally start with a tree because this removes a lot of complicating factors that might be present in other graphs, such as running into a cycle, but everything you learn here will be applicable to when we start working with cyclical graphs to also run our dfs."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-graph-theory-trees-are-also-graphs/",
        "title": "trees are also graphs",
        "preview": "in this video we discuss a specific type of graph - the binary tree. in the video we discuss some of the properties of a tree that make is a special type of graph, and then we discuss a few common properties of trees that aren\u2019t always present, but are often there in order to make trees a more optimal data structure to work with. this is all used to set the stage for upcoming videos where we start to implement some algorithms first using trees, and then later on more general graphs."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-graph-theory-what-is-a-graph/",
        "title": "what is a graph?",
        "preview": "in this video we cover all of the basics about graphs. we start be defining the different parts of a graph, and then jump into a real world example where we translate a map with cities and highways into a graph. finally, we discuss some of the common attributes you might find on a graph, such as cost, capacity, directional edges, and even cycles, and relate these all to our graph derived from a map of cities and highways."
    },
    {
        "url": "https://www.calhoun.io/beginners-stop-limiting-your-projects-to-things-that-are-useful/",
        "title": "beginners - stop limiting your projects to things that are \"useful\"",
        "preview": "i posted this recently on reddit, but i felt it was important enough to post again here.\none of the most common themes i see with beginners or people learning a new language is the question \u201cwhat should i build?\u201d\nthe problem isn\u2019t the question itself, but that so many people want to build something that is both:\n useful to everyone (eg may be a popular open source project), and simple enough that they could build it as their 1st, 2nd, or even 5th project."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/querying-for-multiple-records-with-gos-sql-package/",
        "title": "querying for multiple records with go's sql package",
        "preview": "learn how to query for multiple records using go's database/sql package by querying for several users in a users table."
    },
    {
        "url": "https://www.calhoun.io/show-me-your-username-and-password-requirements/",
        "title": "show me your username and password requirements at login",
        "preview": "this isn\u2019t something i normally write about, but after the hundredth time creating an account with random password or username restrictions i am starting to lose my patience with companies.\nif you are going to require that my username or password have special characters, numbers, capital and lowercase letters, or anything else, show those requirements on the login page.\nno, hiding this information on the login page isn\u2019t making your site more secure."
    },
    {
        "url": "https://www.calhoun.io/querying-for-a-single-record-using-gos-database-sql-package/",
        "title": "querying for a single record using go's database/sql package",
        "preview": "in this article we cover how to query for a single record using go's database/sql package, including handling the errnorows error."
    },
    {
        "url": "https://www.calhoun.io/updating-and-deleting-postgresql-records-using-gos-sql-package/",
        "title": "updating and deleting postgresql records using go's sql package",
        "preview": "learn how to update and delete records with the database/sql package in go. we also cover how to verify how many records were altered and return data from those rows."
    },
    {
        "url": "https://www.calhoun.io/how-to-shuffle-arrays-and-slices-in-go/",
        "title": "how to shuffle arrays and slices in go",
        "preview": "if you are transitioning into go from a language like python or ruby, at some point or another you are going to start missing one of the many helper functions offered by the language. the most recent example of this for me was when i wanted to shuffle a slice.\nin ruby this is as simple as calling the shuffle method.\narray = [1, 2, 3, 4, 5] array.shuffle # shuffles the array!"
    },
    {
        "url": "https://www.calhoun.io/how-to-determine-if-a-json-key-has-been-set-to-null-or-not-provided/",
        "title": "how to determine if a json key has been set to null or not provided",
        "preview": "learn to distinguish between when a json key is set to null or the key wasn't provided at all when dealing with json in go."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/pitfalls-of-context-values-and-how-to-avoid-or-mitigate-them/",
        "title": "pitfalls of context values and how to avoid or mitigate them in go",
        "preview": "storing data in a context.context, or as i refer to it - using context values, is one of the most contentious design patterns in go. storing values in a context appears to be fine with everyone, but what specifically should be stored as a context value receives a lot of heated discussion.\ni\u2019ll be honest - when i started using them i used them in the naive and somewhat inappropriate way that everyone complains about."
    },
    {
        "url": "https://www.calhoun.io/why-are-slices-sometimes-altered-when-passed-by-value-in-go/",
        "title": "why are slices sometimes altered when passed by value in go?",
        "preview": "in this post we discuss what causes some changes to slices to be persisted even when they are passed by value, why this ultimately happens, and how to avoid it."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/wrapping-packages-to-isolate-code-responsibility/",
        "title": "wrapping packages to isolate code responsibility",
        "preview": "when writing code in go, or really any language, you will often find yourself using other packages to get things done. for example, you might use the net/http package as a basis for building a web server rather than writing all that code yourself.\nfrom time to time you might notice that the third party package doesn\u2019t quite behave in a manner that is aligned with how you intend to use the package."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/where-have-all-the-blog-posts-gone/",
        "title": "where have all the blog posts gone?",
        "preview": "my last blog post was published about 25 days ago, and the last update to my book probably happened around the same time. i have had several people ask me if i am going to continue publishing blog posts, or when the next chapter of my book will be out, so today i wanted to take a few minutes to explain what happened in my life that caused such a long gap between any updates."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/updating-and-deleting-records-using-sql/",
        "title": "updating and deleting records stored in a postgresql table using sql",
        "preview": "a short tutorial that teaches how to update and delete records stored in an sql database table using raw sql statements."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-sorting-a-custom-user-type/",
        "title": "let's learn algorithms: sorting a custom user type with bubble sort",
        "preview": "learn how to sort a list with a custom type when you want to use a fallback search criteria. eg sort by last name, then first name if those match."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-binary-searching-for-case-insensitive-strings/",
        "title": "let's learn algorithms: binary searching for case insensitive strings",
        "preview": "learn to implement a binary search where you can find strings regardless of their case when searching in a previously sorted list of strings."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-implementing-binary-search/",
        "title": "let's learn algorithms: implementing binary search",
        "preview": "this tutorial demonstrates how to implement an iterative (without recursion) binary search that can find a number in a sorted list of numbers using golang."
    },
    {
        "url": "https://www.calhoun.io/how-do-interfaces-work-in-go/",
        "title": "how do interfaces work in go, and why do i keep seeing the empty interface (interface{})?",
        "preview": "learn about interfaces in go by walking through an example and comparing them to interfaces in other languages, plus an explanation of the empty interface."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-an-intro-to-binary-search/",
        "title": "let's learn algorithms: an introduction to binary search",
        "preview": "this tutorial explains how binary search, works and then describes how it would be used to find a number in a sorted list with visual examples."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-sorting-a-list-of-strings-in-alphabetical-order-with-bubble-sort/",
        "title": "let's learn algorithms: sorting a list of strings in alphabetical order with bubble sort",
        "preview": "this article demonstrates how to code a bubble sort that sorts a list of strings in a case insensitive manner using go."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-reverse-sorting-a-list-of-numbers-with-bubble-sort/",
        "title": "let's learn algorithms: reverse sorting a list of numbers with bubble sort",
        "preview": "this tutorial demonstrates in detail how to adapt a bubble sort implementation written in go to sort a list of numbers in reverse (non-increasing) order, rather than the default non-decreasing order. it is a useful trick to learn as it will help you custom sort other data types in the future."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/why-we-import-sql-drivers-with-the-blank-identifier/",
        "title": "why we import sql drivers as the blank identifier ( _ ) in go",
        "preview": "when i first started writing go code i was working on a relatively simple web application backed by an sql database, so the first thing i did was google \u201cgolang sql\u201d which lead me to to the database/sql package.\nwhile reading those docs i notice this line in particular.\n the sql package must be used in conjunction with a database driver. see https://golang.org/s/sqldrivers for a list of drivers."
    },
    {
        "url": "https://www.calhoun.io/querying-for-records-stored-in-a-postgresql-table-using-sql/",
        "title": "querying for records stored in a postgresql table using sql",
        "preview": "this tutorial explains how to use the select and where statement to query data from a single sql table."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-implementing-bubble-sort/",
        "title": "let's learn algorithms: implementing bubble sort",
        "preview": "learn to code the bubble sort algorithm in go by walking through a coding example and then working on several practice problems to reinforce the knowledge. if you have ever wanted to learn algorithms, this series is a great place to start."
    },
    {
        "url": "https://www.calhoun.io/lets-learn-algorithms-an-intro-to-bubble-sort/",
        "title": "let's learn algorithms: an introduction to bubble sort",
        "preview": "this tutorial covers bubble sort, explaining how the sorting algorithm works with visual examples. it also covers ways to optimize the algorithm."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-using-sql/",
        "title": "inserting records into a postgresql database using sql",
        "preview": "a tutorial covering how to create records in a postgresql database using the insert and values commands in sql."
    },
    {
        "url": "https://www.calhoun.io/creating-postgresql-databases-and-tables-with-raw-sql/",
        "title": "creating postgresql databases and tables with raw sql",
        "preview": "creating your first database and tables using raw sql and postgresql. you will also use some basic types and constraints like int, not null, and unique."
    },
    {
        "url": "https://www.calhoun.io/how-to-install-postgresql-9-6-on-mac-os-x/",
        "title": "how to install postgresql 9.6 on mac os x (10.7 or later)",
        "preview": "in this guide we walk through installing postgresql 9.6 along with the command line tools on mac os x (10.7 or later)."
    },
    {
        "url": "https://www.calhoun.io/how-to-install-postgresql-9-5-on-ubuntu-16-04/",
        "title": "how to install postgresql 9.5 on ubuntu 16.04",
        "preview": "in this guide we walk through installing postgresql 9.5 on ubuntu 16.04. we will also setup a user that can access the db with a username and password."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/gotchas-and-common-mistakes-with-closures-in-go/",
        "title": "gotchas and common mistakes with closures in go",
        "preview": "this article explores a couple easy to make but hard to debug mistakes that can be made when working with closures in go, and explains how to avoid them."
    },
    {
        "url": "https://www.calhoun.io/5-useful-ways-to-use-closures-in-go/",
        "title": "5 useful ways to use closures in go",
        "preview": "explore five different real world use cases for closures that will help you understand and utilize closures better in your own code."
    },
    {
        "url": "https://www.calhoun.io/what-is-a-closure/",
        "title": "what is a closure?",
        "preview": "an explanation of what anonymous functions and closures are, along with examples of how to create and use them in go (aka golang)."
    },
    {
        "url": "https://www.calhoun.io/how-to-test-with-go/",
        "title": "how to test with go",
        "preview": "in this post jon covers what a test is, along with how to write everything from a basic test to a more complicated test that requires custom setup/teardown."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p4-v-in-mvc/",
        "title": "creating the v in mvc",
        "preview": "learn how to create a reusable view layer to simplify html rendering. this includes creating a shared layout, defining default templates that can be overridden, and including the same templates across various pages without putting all of the code into a single file."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p2-actions/",
        "title": "template actions and nested templates in go",
        "preview": "this article on go templates explains how to use common actions like if/else and range to create more dynamic outputs. after that we examine how to create nested templates and use them to avoid code repition."
    },
    {
        "url": "https://www.calhoun.io/cost-of-living-adjusted-salaries-are-terrible-for-remote-employees/",
        "title": "cost of living adjusted salaries are terrible for remote employees",
        "preview": "imagine interviewing with a company for a position, performing well on the interviews, and finally getting a call with your recruiter only to have the conversation go like this:\nrecruiter: \u201chi! i am calling because you did great during your interviews. before we can continue, would you mind sharing with me what you currently pay in rent?\u201d\nyou: \u201cthat is great! i\u2019m not sure why this is relevant, but our apartment is $2400/mo."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p1-contextual-encoding/",
        "title": "an intro to templates in go - contextual encoding",
        "preview": "a brief intro on how to create your first template in go, which will allow you to create dynamic html pages. after that we explore how the variables are encoded depending on their context."
    },
    {
        "url": "https://www.calhoun.io/path-prefix-middleware/",
        "title": "path prefix middleware in go",
        "preview": "this article covers how to use the http.servemux provided by go's standard libary in order to apply middleware to specific path prefixes (eg /dashboard/*) while ensuring the middleware isn't run on other paths."
    },
    {
        "url": "https://www.calhoun.io/why-is-this-string-a-byte-array/",
        "title": "why is this string a byte array and other info about strings in go",
        "preview": "ever wonder why a string is a byte slice in go, or how to properly splice a string? in this article we discuss some common things that confuse beginners about strings, as well as how to work with them a little more efficiently."
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    },
    {
        "url": "https://www.calhoun.io/add-goimports-to-sublime-text-3/",
        "title": "add goimports to sublime text 3",
        "preview": "this should workin pretty much any version of sublime text, but i have only tested it in sublime text 3.\ni no longer use sublime text in my day to day go development, and i instead use atom. i\u2019m hoping to eventually come back to sublime text, and i have toyed around with building a go plugin for st3, but as of jan, 2018 atom simply has better go support with the go-plus plugin."
    },
    {
        "url": "https://www.calhoun.io/controllers-and-views/",
        "title": "controllers and views in go",
        "preview": "chances are a lot of developers who pick up go will be familiar with the mvc model. models, views, and controllers are great for abstracting away code, but sadly there aren\u2019t many examples of how to use them in go.\nin this post i am going to go over how to get started with a basic controller and view in go, and cover a really simple web application that uses them."
    },
    {
        "url": "https://www.calhoun.io/rate-limiting-api-calls-in-go/",
        "title": "rate limiting api calls in go",
        "preview": "take a quick look at a relatively simple approach to rate limiting api calls in go using a leaky bucket algorithm implemented with goroutines and channels."
    },
    {
        "url": "https://www.calhoun.io/revert-ctrl-e-shortcut-in-sublime-text-emmet/",
        "title": "revert ctrl+e shortcut in sublime text + emmet",
        "preview": "learn how to disable the ctrl+e key binding enabled by the emmet plugin for sublime text"
    },
    {
        "url": "https://www.calhoun.io/6-tips-for-using-strings-in-go/",
        "title": "6 tips for using strings in go",
        "preview": "learn how to perform common operations with strings in go. this article discusses how to write multiline strings, concatenate strings efficiently, convert various data types into strings, checking for prefixes, and converting strings to byte slices."
    },
    {
        "url": "https://www.calhoun.io/intro-to-templates-p3-functions/",
        "title": "using functions inside go templates",
        "preview": "go's template package provides many useful built-in functions. learn to use a few of the more common ones, as well as how to add custom fucntions to your templates so that you can add any functionality you need."
    },
    {
        "url": "https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database-sql-package/",
        "title": "connecting to a postgresql database with go's database/sql package",
        "preview": "this tutorial explains how to connect to a postgres db using the database/sql and lib/pq packages. it also covers potential errors and solutions."
    },
    {
        "url": "https://www.calhoun.io/creating-random-strings-in-go/",
        "title": "creating random strings in go",
        "preview": "a tutorial explaining how to create a custom rand package with functions for creating random strings of varying length with custom of preset character sets."
    },
    {
        "url": "https://www.calhoun.io/inserting-records-into-a-postgresql-database-with-gos-database-sql-package/",
        "title": "inserting records into a postgresql database with go's database/sql package",
        "preview": "learn to insert new records into a postgres database using go's database/sql package, along with how to get the resulting id of newly created records."
    },
    {
        "url": "https://www.calhoun.io/how-to-use-slice-capacity-and-length-in-go/",
        "title": "how to use slice capacity and length in go",
        "preview": "learn about the difference between capacity and length and how to properly utilize them to make your go code faster, cleaner, and memory efficient."
    }
]